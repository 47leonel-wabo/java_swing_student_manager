/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import db.DatabaseDetails;
import db.MySQLConnection;
import java.awt.HeadlessException;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import model.Student;
import net.coobird.thumbnailator.Thumbnails;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author ddok
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.setTitle("Student Manager Application | Details");
        // Center main window on screen
        this.setLocationRelativeTo(null);
        student = new Student();

        // Get connection to database
        dbConnection = MySQLConnection.connectDB();

        // Populate student data into the table at start up
        try {
            updateStudentTable();
        } catch (SQLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Disable deletion by default as form is empty
        delete_btn.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gender_button_group = new javax.swing.ButtonGroup();
        rootPanel = new javax.swing.JPanel();
        parentFormPanel = new javax.swing.JPanel();
        formPanel = new javax.swing.JPanel();
        student_id_label = new javax.swing.JLabel();
        first_name_label = new javax.swing.JLabel();
        last_name_label = new javax.swing.JLabel();
        gender_label = new javax.swing.JLabel();
        birth_date_label = new javax.swing.JLabel();
        phone_label = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        studentId_tf = new javax.swing.JTextField();
        studentFirstName_tf = new javax.swing.JTextField();
        studentLastName_tf = new javax.swing.JTextField();
        genderFemale_rb = new javax.swing.JRadioButton();
        genderMale_rb = new javax.swing.JRadioButton();
        studentPhone_tf = new javax.swing.JTextField();
        studentDisciplines_cb = new javax.swing.JComboBox<>();
        student_address_label = new javax.swing.JLabel();
        studentAddress_tf = new javax.swing.JTextField();
        studentProfileImabe_btn = new javax.swing.JButton();
        student_img_dkt = new javax.swing.JDesktopPane();
        studentProfileImage = new javax.swing.JLabel();
        studentBirthDateChooser = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        save_btn = new javax.swing.JButton();
        delete_btn = new javax.swing.JButton();
        update_btn = new javax.swing.JButton();
        clearForm_btn = new javax.swing.JButton();
        imageProfilePath = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentDataTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        search_tf = new javax.swing.JTextField();
        seacrch_label = new javax.swing.JLabel();
        printData_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rootPanel.setBackground(new java.awt.Color(255, 255, 255));

        parentFormPanel.setBackground(new java.awt.Color(255, 255, 255));

        formPanel.setBackground(new java.awt.Color(255, 255, 255));
        formPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 204)));

        student_id_label.setText("Stident ID");

        first_name_label.setText("First Name");

        last_name_label.setText("Last Name");

        gender_label.setText("Gender");

        birth_date_label.setText("Birth Date");

        phone_label.setText("Phone");

        jLabel1.setText("Faculty");

        studentId_tf.setEditable(false);
        studentId_tf.setEnabled(false);
        studentId_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentId_tfActionPerformed(evt);
            }
        });

        gender_button_group.add(genderFemale_rb);
        genderFemale_rb.setText("FEMALE");
        genderFemale_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderFemale_rbActionPerformed(evt);
            }
        });

        gender_button_group.add(genderMale_rb);
        genderMale_rb.setText("MALE");
        genderMale_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderMale_rbActionPerformed(evt);
            }
        });

        studentDisciplines_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chimistry", "Math", "Computer Science", "Economy", "Marketing", "Human Resources", "Health" }));

        student_address_label.setText("Address");

        studentAddress_tf.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        studentAddress_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentAddress_tfActionPerformed(evt);
            }
        });

        studentProfileImabe_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/picture.png"))); // NOI18N
        studentProfileImabe_btn.setText("Upload Profile Image");
        studentProfileImabe_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentProfileImabe_btnActionPerformed(evt);
            }
        });

        student_img_dkt.setBackground(new java.awt.Color(204, 204, 204));

        studentProfileImage.setBackground(new java.awt.Color(204, 204, 204));

        student_img_dkt.setLayer(studentProfileImage, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout student_img_dktLayout = new javax.swing.GroupLayout(student_img_dkt);
        student_img_dkt.setLayout(student_img_dktLayout);
        student_img_dktLayout.setHorizontalGroup(
            student_img_dktLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(student_img_dktLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentProfileImage, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addContainerGap())
        );
        student_img_dktLayout.setVerticalGroup(
            student_img_dktLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(student_img_dktLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentProfileImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actions", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cantarell", 0, 15), new java.awt.Color(0, 204, 204))); // NOI18N

        save_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        save_btn.setText("Save");
        save_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_btnActionPerformed(evt);
            }
        });

        delete_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        delete_btn.setText("Delete");
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });

        update_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        update_btn.setText("Update");
        update_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(save_btn)
                .addGap(10, 10, 10)
                .addComponent(delete_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(update_btn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save_btn)
                    .addComponent(delete_btn)
                    .addComponent(update_btn))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        clearForm_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clear_ui.png"))); // NOI18N
        clearForm_btn.setText("Clear Form");
        clearForm_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearForm_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout formPanelLayout = new javax.swing.GroupLayout(formPanel);
        formPanel.setLayout(formPanelLayout);
        formPanelLayout.setHorizontalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(first_name_label)
                                .addComponent(student_id_label))
                            .addGap(18, 18, 18)
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(studentId_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(studentFirstName_tf, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)))
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(last_name_label)
                                .addComponent(gender_label)
                                .addComponent(phone_label)
                                .addComponent(jLabel1)
                                .addComponent(birth_date_label))
                            .addGap(21, 21, 21)
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(formPanelLayout.createSequentialGroup()
                                    .addComponent(genderFemale_rb)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(genderMale_rb))
                                .addComponent(studentLastName_tf)
                                .addComponent(studentPhone_tf)
                                .addComponent(studentDisciplines_cb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(studentBirthDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(imageProfilePath))
                .addGap(18, 18, 18)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(formPanelLayout.createSequentialGroup()
                        .addComponent(student_address_label)
                        .addGap(18, 18, 18)
                        .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studentProfileImabe_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(studentAddress_tf)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearForm_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addComponent(student_img_dkt)
                .addContainerGap())
        );
        formPanelLayout.setVerticalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(formPanelLayout.createSequentialGroup()
                        .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(formPanelLayout.createSequentialGroup()
                                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(student_id_label)
                                    .addComponent(studentId_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(student_address_label))
                                .addGap(27, 27, 27)
                                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(first_name_label)
                                    .addComponent(studentFirstName_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(last_name_label)
                                    .addComponent(studentLastName_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(gender_label)
                                    .addComponent(genderFemale_rb)
                                    .addComponent(genderMale_rb)))
                            .addComponent(studentAddress_tf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(birth_date_label)
                                .addComponent(studentProfileImabe_btn))
                            .addComponent(studentBirthDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(formPanelLayout.createSequentialGroup()
                                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(phone_label)
                                    .addComponent(studentPhone_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(studentDisciplines_cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearForm_btn)
                            .addComponent(imageProfilePath)))
                    .addComponent(student_img_dkt))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        parentFormPanel.add(formPanel);

        studentDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        studentDataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentDataTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentDataTable);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 1, true));

        search_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_tfActionPerformed(evt);
            }
        });

        seacrch_label.setText("SEARCH:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(seacrch_label)
                .addGap(18, 18, 18)
                .addComponent(search_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seacrch_label))
                .addContainerGap())
        );

        jPanel3.add(jPanel2);

        printData_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/printer.png"))); // NOI18N
        printData_btn.setText("Print Table");
        printData_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printData_btnActionPerformed(evt);
            }
        });
        jPanel3.add(printData_btn);

        javax.swing.GroupLayout rootPanelLayout = new javax.swing.GroupLayout(rootPanel);
        rootPanel.setLayout(rootPanelLayout);
        rootPanelLayout.setHorizontalGroup(
            rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(rootPanelLayout.createSequentialGroup()
                .addGroup(rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rootPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(parentFormPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        rootPanelLayout.setVerticalGroup(
            rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rootPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(parentFormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rootPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rootPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void studentId_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentId_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentId_tfActionPerformed

    private void studentAddress_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentAddress_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentAddress_tfActionPerformed

    private void studentProfileImabe_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentProfileImabe_btnActionPerformed

        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView());

        // Setting file extensions
        fileChooser.setFileFilter(new FileNameExtensionFilter("png, jpg, jpeg, or gif formats", "png", "jpeg", "jpg", "gif"));
        // Open the dialog
        fileChooser.showSaveDialog(null);
        // Get selected file
        File f = fileChooser.getSelectedFile();

        // Update label with path
        imageProfilePath.setText("Image path: ".concat(f.getAbsolutePath()));

        try {
            File imageFile = new File(f.getAbsolutePath());
            BufferedImage thumbnailImage = Thumbnails.of(imageFile).size(300, 300).asBufferedImage();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(thumbnailImage, "png", baos);
            InputStream is = new ByteArrayInputStream(baos.toByteArray());

            ByteArrayOutputStream bas = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readed; (readed = is.read(buf)) != -1;) {
                bas.write(buf, 0, readed);
            }
            // Loading image into the icon
            studentProfileImage.setIcon(new ImageIcon(thumbnailImage));

            // Passing student's picture as an array of bytes for database saving
            studentPicture = bas.toByteArray();

        } catch (Exception e) {
            JOptionPane.showInternalMessageDialog(null, e);
        }

    }//GEN-LAST:event_studentProfileImabe_btnActionPerformed

    private void update_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_btnActionPerformed
        // Update student data
        establishDatabaseConnectionIfClosed();
        try {
            String updateStudentDataQuery = "UPDATE "
                    .concat(DatabaseDetails.student_table)
                    .concat(" SET "
                            + "first_name=?, "
                            + "last_name=?, "
                            + "birth_date=?, "
                            + "gender=?, "
                            + "phone=?, "
                            + "discipline=?, "
                            + "address=?, "
                            + "photo=? "
                            + "WHERE id=?");
            ps = dbConnection.prepareStatement(updateStudentDataQuery);
            if (isFormInputFieldsValidated()) {
                fillQueryParameters();

                ps.setString(9, studentDataTable
                        .getModel()
                        .getValueAt(studentDataTable.getSelectedRow(), 0)
                        .toString());
                ps.execute();
                JOptionPane.showMessageDialog(null, "Data Updated Successfully.");
                // Update data on table
                updateStudentTable();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
            closeDatabaseConnection();
        }
    }//GEN-LAST:event_update_btnActionPerformed

    private void fillQueryParameters() throws SQLException {
        ps.setString(1, studentFirstName_tf.getText());
        ps.setString(2, studentLastName_tf.getText());
        // date
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formatedDate = sdf.format(studentBirthDateChooser.getDate());
        ps.setString(3, formatedDate);

        ps.setString(4, student.getGender());
        ps.setString(5, studentPhone_tf.getText());
        ps.setString(6, studentDisciplines_cb.getSelectedItem().toString());
        ps.setString(7, studentAddress_tf.getText());
        // photo
        if (studentPicture != null) {
            // student picture as bytes
            ps.setBytes(8, studentPicture);
        }
    }

    private void search_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search_tfActionPerformed

    private void genderFemale_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderFemale_rbActionPerformed
        if (student != null) {
            student.setGender("FEMALE");
        }
    }//GEN-LAST:event_genderFemale_rbActionPerformed

    private void genderMale_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderMale_rbActionPerformed
        if (student != null) {
            student.setGender("MALE");
        }
    }//GEN-LAST:event_genderMale_rbActionPerformed

    private void save_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_btnActionPerformed
        if (isFormInputFieldsValidated()) {
            // Everything is ok, then we proceed
            try {
                // Perform insertion
                insertNewStudent();

                // Clear form content
                freeForm();

                // Update data table
                updateStudentTable();

                JOptionPane.showMessageDialog(null, "Data Saved!");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            } finally {
                closeDatabaseConnection();
            }
        }
    }//GEN-LAST:event_save_btnActionPerformed

    private boolean isFormInputFieldsValidated() throws HeadlessException {
        // Input field validation
        if (studentFirstName_tf.getText().trim().isBlank()) {
            JOptionPane.showMessageDialog(null, "Please provide First Name.");
            return false;
        } else if (studentLastName_tf.getText().trim().isBlank()) {
            JOptionPane.showMessageDialog(null, "Please provide Last Name.");
            return false;
        } else if (student.getGender() == null) {
            JOptionPane.showMessageDialog(null, "Please select a gender.");
            return false;
        } else if (studentBirthDateChooser.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Birth date need to be provided.");
            return false;
        } else if (studentAddress_tf.getText().trim().isBlank()) {
            JOptionPane.showMessageDialog(null, "Please provide an address.");
            return false;
        } else if (studentPhone_tf.getText().trim().isBlank()) {
            JOptionPane.showMessageDialog(null, "Please provide Phone number.");
            return false;
        } else if (studentPicture == null) {
            JOptionPane.showMessageDialog(null, "Please UPLOAD student's profile image.");
            return false;
        } else {
            return true;
        }
    }

    private void closeDatabaseConnection() {
        try {
            //ps.close();
            //rs.close();
            dbConnection.close();
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearForm_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearForm_btnActionPerformed
        freeForm();
        // Enable save button
        save_btn.setEnabled(true);
        // Disable deletion by default as form is empty
        delete_btn.setEnabled(false);
    }//GEN-LAST:event_clearForm_btnActionPerformed

    /*
        This method is called to populate the upper form with data of 
        select row in the table when clicked
     */
    private void studentDataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentDataTableMouseClicked
        int selectedRow = studentDataTable.getSelectedRow();

        // Make delete option available
        delete_btn.setEnabled(true);

        // Disable save button
        save_btn.setEnabled(false);

        // First we establish a new database connection if closed
        establishDatabaseConnectionIfClosed();

        try {
            final String id = studentDataTable.getModel().getValueAt(selectedRow, 0).toString();

            String getSelectedItemQuery = "SELECT * FROM "
                    .concat(DatabaseDetails.student_table)
                    .concat(" WHERE id='" + id + "'");

            ps = dbConnection.prepareStatement(getSelectedItemQuery);
            rs = ps.executeQuery();
            if (rs.next()) {
                studentId_tf.setText(rs.getString("id"));
                studentFirstName_tf.setText(rs.getString("first_name"));
                studentLastName_tf.setText(rs.getString("last_name"));
                if (rs.getString("gender").equals("MALE")) {
                    genderMale_rb.setSelected(true);
                } else {
                    genderFemale_rb.setSelected(true);
                }
                studentPhone_tf.setText(rs.getString("phone"));
                studentDisciplines_cb.setSelectedItem(rs.getString("discipline"));
                studentAddress_tf.setText(rs.getString("address"));
                studentBirthDateChooser.setDate(
                        new SimpleDateFormat("yyyy-MM-dd")
                                .parse(rs.getString("birth_date"))
                );

                // Loading student picture from database
                byte[] pictureData = rs.getBytes("photo");
                studentProfileImage.setIcon(
                        new ImageIcon(pictureData)
                );
                // Pass it to local variable
                studentPicture = pictureData;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
            closeDatabaseConnection();
        }
    }//GEN-LAST:event_studentDataTableMouseClicked

    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed
        establishDatabaseConnectionIfClosed();
        // Show confirmation dialog
        int response = JOptionPane.showConfirmDialog(
                null, // parent node
                "Do you really want to REMOVE this row?", // message
                "Delete Student Data", // Dialog title
                JOptionPane.YES_NO_OPTION);
        if (response == 0) { // Yes, selected
            String studentDeletionQuery = "DELETE FROM "
                    .concat(DatabaseDetails.student_table)
                    .concat(" WHERE id='" + studentId_tf.getText() + "'");
            try {
                ps = dbConnection.prepareStatement(studentDeletionQuery);
                ps.execute();
                updateStudentTable(); // Resfresh data table
                freeForm(); // Clear data into the form
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            } finally {
                closeDatabaseConnection();
            }
        }
    }//GEN-LAST:event_delete_btnActionPerformed

    private void printData_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printData_btnActionPerformed
        
        MessageFormat printHeader = new MessageFormat("Student Details List");
        MessageFormat printFooter = new MessageFormat("Page {0, number, integer}");
        try {
            studentDataTable.print(JTable.PrintMode.FIT_WIDTH, printHeader, printFooter);
        } catch (PrinterException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_printData_btnActionPerformed

    private void establishDatabaseConnectionIfClosed() {
        try {
            if (dbConnection.isClosed()) {
                dbConnection = MySQLConnection.connectDB();
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void freeForm() {
        studentId_tf.setText("");
        studentFirstName_tf.setText("");
        studentLastName_tf.setText("");
        studentPhone_tf.setText("");
        studentAddress_tf.setText("");
        studentBirthDateChooser.setDate(null);
        studentProfileImage.setIcon(null);
        studentDisciplines_cb.setSelectedIndex(0);
        genderFemale_rb.setSelected(false);
        genderMale_rb.setSelected(false);
        imageProfilePath.setText("");
    }

    private void insertNewStudent() throws SQLException {
        String insertStudentQuery = "INSERT INTO "
                .concat(DatabaseDetails.student_table)
                + " (first_name, last_name, birth_date, gender, phone, discipline, address, photo) "
                + " VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        if (dbConnection == null) {
            dbConnection = MySQLConnection.connectDB();
        }
        ps = dbConnection.prepareStatement(insertStudentQuery);
        // Passing query parameters
        fillQueryParameters();

        ps.execute();
    }

    private void updateStudentTable() throws SQLException {
        try {
            String selectStudentsQuery = "SELECT * FROM ".concat(DatabaseDetails.student_table);
            if (dbConnection == null) {
                dbConnection = MySQLConnection.connectDB();
            }
            ps = dbConnection.prepareStatement(selectStudentsQuery);
            rs = ps.executeQuery();
            studentDataTable.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
            closeDatabaseConnection();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel birth_date_label;
    private javax.swing.JButton clearForm_btn;
    private javax.swing.JButton delete_btn;
    private javax.swing.JLabel first_name_label;
    private javax.swing.JPanel formPanel;
    private javax.swing.JRadioButton genderFemale_rb;
    private javax.swing.JRadioButton genderMale_rb;
    private javax.swing.ButtonGroup gender_button_group;
    private javax.swing.JLabel gender_label;
    private javax.swing.JLabel imageProfilePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel last_name_label;
    private javax.swing.JPanel parentFormPanel;
    private javax.swing.JLabel phone_label;
    private javax.swing.JButton printData_btn;
    private javax.swing.JPanel rootPanel;
    private javax.swing.JButton save_btn;
    private javax.swing.JLabel seacrch_label;
    private javax.swing.JTextField search_tf;
    private javax.swing.JTextField studentAddress_tf;
    private com.toedter.calendar.JDateChooser studentBirthDateChooser;
    private javax.swing.JTable studentDataTable;
    private javax.swing.JComboBox<String> studentDisciplines_cb;
    private javax.swing.JTextField studentFirstName_tf;
    private javax.swing.JTextField studentId_tf;
    private javax.swing.JTextField studentLastName_tf;
    private javax.swing.JTextField studentPhone_tf;
    private javax.swing.JButton studentProfileImabe_btn;
    private javax.swing.JLabel studentProfileImage;
    private javax.swing.JLabel student_address_label;
    private javax.swing.JLabel student_id_label;
    private javax.swing.JDesktopPane student_img_dkt;
    private javax.swing.JButton update_btn;
    // End of variables declaration//GEN-END:variables

    private Student student = null;
    private PreparedStatement ps = null;
    private Connection dbConnection = null;
    private ResultSet rs = null;
    private byte[] studentPicture = null;
}
